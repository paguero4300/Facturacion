<?php

namespace App\Filament\Resources;

use App\Filament\Resources\PaymentValidationResource\Pages;
use App\Models\Invoice;
use App\Enums\PaymentValidationStatus;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;
use Filament\Tables\Actions\Action;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\BadgeColumn;
use Filament\Tables\Columns\ImageColumn;
use Filament\Tables\Filters\SelectFilter;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\ViewField;
use Filament\Notifications\Notification;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\HtmlString;

class PaymentValidationResource extends Resource
{
    protected static ?string $model = Invoice::class;

    protected static ?string $navigationIcon = 'heroicon-o-credit-card';
    
    protected static ?string $navigationLabel = 'Validación de Pagos';
    
    protected static ?string $modelLabel = 'Validación de Pago';
    
    protected static ?string $pluralModelLabel = 'Validaciones de Pagos';
    
    protected static ?int $navigationSort = 15;

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->whereIn('payment_validation_status', [
                PaymentValidationStatus::PENDING_VALIDATION,
                PaymentValidationStatus::PAYMENT_REJECTED,
            ])
            ->orWhere(function (Builder $query) {
                $query->where('payment_validation_status', PaymentValidationStatus::PAYMENT_APPROVED)
                      ->where('payment_validated_at', '>=', now()->subDays(7));
            })
            ->with(['paymentValidatedBy', 'createdBy'])
            ->orderBy('created_at', 'desc');
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Información del Pedido')
                    ->icon('heroicon-o-document-text')
                    ->columns(2)
                    ->schema([
                        Forms\Components\TextInput::make('full_number')
                            ->label('Número de Pedido')
                            ->disabled(),
                        
                        Forms\Components\TextInput::make('client_business_name')
                            ->label('Cliente')
                            ->disabled(),
                        
                        Forms\Components\TextInput::make('total_amount')
                            ->label('Monto Total')
                            ->disabled()
                            ->prefix('S/'),
                        
                        Forms\Components\TextInput::make('payment_method')
                            ->label('Método de Pago')
                            ->disabled()
                            ->formatStateUsing(fn (string $state): string => match ($state) {
                                'yape' => 'Yape',
                                'plin' => 'Plin',
                                'transfer' => 'Transferencia',
                                'cash' => 'Efectivo',
                                'card' => 'Tarjeta',
                                default => $state,
                            }),
                    ]),

                Section::make('Detalles del Pago')
                    ->icon('heroicon-o-banknotes')
                    ->columns(2)
                    ->schema([
                        Forms\Components\TextInput::make('payment_operation_number')
                            ->label('Número de Operación')
                            ->disabled(),
                        
                        Forms\Components\TextInput::make('client_payment_phone')
                            ->label('Teléfono del Cliente')
                            ->disabled(),
                    ]),

                Section::make('Comprobante de Pago')
                    ->icon('heroicon-o-photo')
                    ->schema([
                        ViewField::make('payment_evidence')
                            ->label('Evidencia de Pago')
                            ->view('filament.forms.components.payment-evidence-viewer')
                            ->visible(fn (Model $record): bool => $record->hasPaymentEvidence()),
                    ]),

                Section::make('Validación')
                    ->icon('heroicon-o-check-circle')
                    ->columns(1)
                    ->schema([
                        Forms\Components\Select::make('payment_validation_status')
                            ->label('Estado de Validación')
                            ->options(PaymentValidationStatus::getOptions())
                            ->required()
                            ->live()
                            ->disabled(fn (Model $record): bool => 
                                $record->payment_validation_status === PaymentValidationStatus::PAYMENT_APPROVED
                            ),
                        
                        Textarea::make('payment_validation_notes')
                            ->label('Notas de Validación')
                            ->rows(3)
                            ->placeholder('Agregar comentarios sobre la validación...'),
                    ]),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('full_number')
                    ->label('Número')
                    ->searchable()
                    ->sortable(),
                
                TextColumn::make('client_business_name')
                    ->label('Cliente')
                    ->searchable()
                    ->limit(30),
                
                TextColumn::make('payment_method')
                    ->label('Método')
                    ->formatStateUsing(fn (string $state): string => match ($state) {
                        'yape' => 'Yape',
                        'plin' => 'Plin',
                        'transfer' => 'Transferencia',
                        'cash' => 'Efectivo',
                        'card' => 'Tarjeta',
                        default => $state,
                    })
                    ->badge()
                    ->color(fn (string $state): string => match ($state) {
                        'yape', 'plin' => 'warning',
                        'transfer' => 'info',
                        'cash' => 'success',
                        'card' => 'primary',
                        default => 'gray',
                    }),
                
                TextColumn::make('total_amount')
                    ->label('Monto')
                    ->money('PEN')
                    ->sortable(),
                
                TextColumn::make('payment_operation_number')
                    ->label('Nº Operación')
                    ->limit(15)
                    ->placeholder('No informado'),
                
                BadgeColumn::make('payment_validation_status')
                    ->label('Estado')
                    ->formatStateUsing(fn (PaymentValidationStatus $state): string => $state->label())
                    ->colors([
                        'warning' => PaymentValidationStatus::PENDING_VALIDATION,
                        'success' => PaymentValidationStatus::PAYMENT_APPROVED,
                        'danger' => PaymentValidationStatus::PAYMENT_REJECTED,
                    ]),
                
                TextColumn::make('created_at')
                    ->label('Fecha Pedido')
                    ->dateTime('d/m/Y H:i')
                    ->sortable(),
                
                TextColumn::make('payment_validated_at')
                    ->label('Validado')
                    ->dateTime('d/m/Y H:i')
                    ->placeholder('Pendiente')
                    ->toggleable(isToggledHiddenByDefault: true),
                
                TextColumn::make('paymentValidatedBy.name')
                    ->label('Validado por')
                    ->placeholder('Pendiente')
                    ->toggleable(isToggledHiddenByDefault: true),
            ])
            ->filters([
                SelectFilter::make('payment_validation_status')
                    ->label('Estado')
                    ->options(PaymentValidationStatus::getOptions())
                    ->default(PaymentValidationStatus::PENDING_VALIDATION->value),
                
                SelectFilter::make('payment_method')
                    ->label('Método de Pago')
                    ->options([
                        'yape' => 'Yape',
                        'plin' => 'Plin',
                        'transfer' => 'Transferencia',
                        'cash' => 'Efectivo',
                        'card' => 'Tarjeta',
                    ]),
            ])
            ->actions([
                Action::make('view_evidence')
                    ->label('Ver Comprobante')
                    ->icon('heroicon-o-eye')
                    ->color('info')
                    ->url(fn (Invoice $record): string => route('payment.evidence.view', $record))
                    ->openUrlInNewTab()
                    ->visible(fn (Invoice $record): bool => $record->hasPaymentEvidence()),
                
                Action::make('approve')
                    ->label('Aprobar')
                    ->icon('heroicon-o-check-circle')
                    ->color('success')
                    ->requiresConfirmation()
                    ->modalHeading('Aprobar Pago')
                    ->modalDescription(fn (Invoice $record) => "¿Estás seguro de que quieres aprobar el pago del pedido {$record->full_number} por S/ {$record->total_amount}?")
                    ->action(function (Invoice $record) {
                        $record->approvePayment(Auth::id(), 'Pago aprobado desde panel administrativo');
                        
                        Notification::make()
                            ->title('Pago Aprobado')
                            ->success()
                            ->body("El pago del pedido {$record->full_number} ha sido aprobado.")
                            ->send();
                    })
                    ->visible(fn (Invoice $record): bool => 
                        $record->payment_validation_status === PaymentValidationStatus::PENDING_VALIDATION ||
                        $record->payment_validation_status === PaymentValidationStatus::PAYMENT_REJECTED
                    ),
                
                Action::make('reject')
                    ->label('Rechazar')
                    ->icon('heroicon-o-x-circle')
                    ->color('danger')
                    ->requiresConfirmation()
                    ->modalHeading('Rechazar Pago')
                    ->modalDescription(fn (Invoice $record) => "¿Estás seguro de que quieres rechazar el pago del pedido {$record->full_number}?")
                    ->form([
                        Textarea::make('rejection_notes')
                            ->label('Motivo del rechazo')
                            ->required()
                            ->placeholder('Explica por qué se rechaza el pago...')
                    ])
                    ->action(function (array $data, Invoice $record) {
                        $record->rejectPayment(Auth::id(), $data['rejection_notes']);
                        
                        Notification::make()
                            ->title('Pago Rechazado')
                            ->warning()
                            ->body("El pago del pedido {$record->full_number} ha sido rechazado.")
                            ->send();
                    })
                    ->visible(fn (Invoice $record): bool => 
                        $record->payment_validation_status === PaymentValidationStatus::PENDING_VALIDATION
                    ),
                
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Action::make('bulk_approve')
                        ->label('Aprobar Seleccionados')
                        ->icon('heroicon-o-check-circle')
                        ->color('success')
                        ->requiresConfirmation()
                        ->action(function (Collection $records) {
                            $approved = 0;
                            foreach ($records as $record) {
                                if ($record->payment_validation_status === PaymentValidationStatus::PENDING_VALIDATION ||
                                    $record->payment_validation_status === PaymentValidationStatus::PAYMENT_REJECTED) {
                                    $record->approvePayment(Auth::id(), 'Aprobación masiva desde panel administrativo');
                                    $approved++;
                                }
                            }
                            
                            Notification::make()
                                ->title('Pagos Aprobados')
                                ->success()
                                ->body("{$approved} pagos han sido aprobados.")
                                ->send();
                        }),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListPaymentValidations::route('/'),
            'view' => Pages\ViewPaymentValidation::route('/{record}'),
        ];
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::pendingPaymentValidation()->count();
    }

    public static function canCreate(): bool
    {
        return false;
    }

    public static function canEdit(Model $record): bool
    {
        return $record->payment_validation_status !== PaymentValidationStatus::PAYMENT_APPROVED;
    }

    public static function canDelete(Model $record): bool
    {
        return false;
    }
}